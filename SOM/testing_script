#
#
# Script to test MY knowledge about variables!
#

#Variables
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
i=1
totalacc=0

#Preconditions
if [ "$#" -ne 2 ]; then
    echo -e "${RED}ERROR:${NC} You must enter the map configuration x and y neurons"
    exit 1
fi
if [ -d "./Pruebas/Prueba-$1-$2" ]; then
    echo `rm -rf ./Pruebas/Prueba-$1-$2`
fi

#LVQ Calculation
echo -e "Starting the code exection ...\n"
#crea carpeta de pruebas
echo `mkdir ./Pruebas/Prueba-$1-$2`
for j in {1..3}
do
    #Generate som_pak files
    echo `mkdir ./Pruebas/Prueba-$1-$2/Fold$j`
    echo -e "${GREEN}Set of commmands x:$1 y:$2 #:$j:\n${NC}"
    echo `./som_pak-3.1/randinit -din Train$j.txt -cout Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod -xdim $1 -ydim $2 -topol hexa -neigh bubble`
    echo `./som_pak-3.1/vsom -din Train$j.txt -cin Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod -cout Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod -rlen 1000 -alpha 0.05 -radius 10`
    echo `./som_pak-3.1/vsom -din Train$j.txt -cin Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod -cout Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod -rlen 10000 -alpha 0.02 -radius 3`
    echo `./som_pak-3.1/qerror -din Train$j.txt -cin Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod > Pruebas/Prueba-$1-$2/Fold$j/qerror-$j.txt`
    echo `./som_pak-3.1/vcal -din Train$j.txt -cin Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod -cout Pruebas/Prueba-$1-$2/Fold$j/diabetesCal-$j.cod`
    echo `./som_pak-3.1/visual -din Test$j.txt -cin Pruebas/Prueba-$1-$2/Fold$j/diabetesCal-$j.cod -dout Pruebas/Prueba-$1-$2/Fold$j/diabVisual-$j.txt`
    echo `./som_pak-3.1/sammon -cin Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod -cout Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.sam -rlen 100 -ps`
    echo `./som_pak-3.1/umat -cin Pruebas/Prueba-$1-$2/Fold$j/diabetes-$j.cod > Pruebas/Prueba-$1-$2/Fold$j/diab-$j.umat.ps`
    
    #calculating accuracy
    sed -n "2,$ p" ./Pruebas/Prueba-$1-$2/Fold$j/diabVisual-$j.txt | grep -oE [a-z]+ >temp_v
    sed -n "3,$ p" Test$j.txt | grep -oE [a-z]+ >temp_t
    errors=$(awk 'FNR==NR{a[NR]=$0;next;} $0!=a[FNR]' temp_t temp_v| wc -l)
    total=$(wc -l <temp_v)
    accuracy=$(echo "scale=10;($total-$errors)/$total"|bc)
    totalacc=$(echo "scale=10;$totalacc+$accuracy"|bc)
    echo -e "errors: $errors matches: $(echo $total-$errors|bc) total: $total\naccuracy: $accuracy"
    echo -e "errors: $errors matches: $(echo $total-$errors|bc) total: $total\naccuracy: $accuracy"> ./Pruebas/Prueba-$1-$2/Fold$j/accuracy-$j.txt
    echo -e "Fold number $j:\nerrors: $errors matches: $(echo $total-$errors|bc) total: $total\naccuracy: $accuracy">>./Pruebas/Prueba-$1-$2/Taccuracy.txt
    rm temp_t temp_v
done
totalacc=$(echo "scale=10;$totalacc/3"|bc)
echo "Total accuracy between all the folds: $totalacc" >> ./Pruebas/Prueba-$1-$2/Taccuracy.txt
echo "$totalacc -- done."
exit 0
